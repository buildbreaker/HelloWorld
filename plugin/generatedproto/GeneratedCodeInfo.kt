// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.protobuf.GeneratedCodeInfo in descriptor.proto
package com.google.protobuf.compiler

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 *  Describes the relationship between generated code and its original source
 *  file. A GeneratedCodeInfo message is associated with only one generated
 *  source file, but may contain references to different source .proto files.
 */
public class GeneratedCodeInfo(
  annotation_: List<Annotation> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<GeneratedCodeInfo, Nothing>(ADAPTER, unknownFields) {
  /**
   *  An Annotation connects some span of text in generated code to an element
   *  of its generating .proto file.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.google.protobuf.GeneratedCodeInfo${'$'}Annotation#ADAPTER",
    label = WireField.Label.REPEATED,
    declaredName = "annotation",
  )
  public val annotation_: List<Annotation> = immutableCopyOf("annotation_", annotation_)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is GeneratedCodeInfo) return false
    if (unknownFields != other.unknownFields) return false
    if (annotation_ != other.annotation_) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + annotation_.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (annotation_.isNotEmpty()) result += """annotation_=$annotation_"""
    return result.joinToString(prefix = "GeneratedCodeInfo{", separator = ", ", postfix = "}")
  }

  public fun copy(annotation_: List<Annotation> = this.annotation_, unknownFields: ByteString =
      this.unknownFields): GeneratedCodeInfo = GeneratedCodeInfo(annotation_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<GeneratedCodeInfo> = object : ProtoAdapter<GeneratedCodeInfo>(
      FieldEncoding.LENGTH_DELIMITED, 
      GeneratedCodeInfo::class, 
      "type.googleapis.com/google.protobuf.GeneratedCodeInfo", 
      PROTO_2, 
      null, 
      "descriptor.proto"
    ) {
      public override fun encodedSize(`value`: GeneratedCodeInfo): Int {
        var size = value.unknownFields.size
        size += Annotation.ADAPTER.asRepeated().encodedSizeWithTag(1, value.annotation_)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: GeneratedCodeInfo): Unit {
        Annotation.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.annotation_)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: GeneratedCodeInfo): Unit {
        writer.writeBytes(value.unknownFields)
        Annotation.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.annotation_)
      }

      public override fun decode(reader: ProtoReader): GeneratedCodeInfo {
        val annotation_ = mutableListOf<Annotation>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> annotation_.add(Annotation.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return GeneratedCodeInfo(
          annotation_ = annotation_,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: GeneratedCodeInfo): GeneratedCodeInfo = value.copy(
        annotation_ = value.annotation_.redactElements(Annotation.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public class Annotation(
    path: List<Int> = emptyList(),
    /**
     *  Identifies the filesystem path to the original source .proto.
     */
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      jsonName = "sourceFile",
    )
    public val source_file: String? = null,
    /**
     *  Identifies the starting offset in bytes in the generated code
     *  that relates to the identified object.
     */
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
    )
    public val begin: Int? = null,
    /**
     *  Identifies the ending offset in bytes in the generated code that
     *  relates to the identified offset. The end offset should be one past
     *  the last relevant byte (so the length of the text = end - begin).
     */
    @field:WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
    )
    public val end: Int? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<Annotation, Nothing>(ADAPTER, unknownFields) {
    /**
     *  Identifies the element in the original source .proto file. This field
     *  is formatted the same as SourceCodeInfo.Location.path.
     */
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32",
      label = WireField.Label.PACKED,
    )
    public val path: List<Int> = immutableCopyOf("path", path)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    public override fun newBuilder(): Nothing = throw
        AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Annotation) return false
      if (unknownFields != other.unknownFields) return false
      if (path != other.path) return false
      if (source_file != other.source_file) return false
      if (begin != other.begin) return false
      if (end != other.end) return false
      return true
    }

    public override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + path.hashCode()
        result = result * 37 + (source_file?.hashCode() ?: 0)
        result = result * 37 + (begin?.hashCode() ?: 0)
        result = result * 37 + (end?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    public override fun toString(): String {
      val result = mutableListOf<String>()
      if (path.isNotEmpty()) result += """path=$path"""
      if (source_file != null) result += """source_file=${sanitize(source_file)}"""
      if (begin != null) result += """begin=$begin"""
      if (end != null) result += """end=$end"""
      return result.joinToString(prefix = "Annotation{", separator = ", ", postfix = "}")
    }

    public fun copy(
      path: List<Int> = this.path,
      source_file: String? = this.source_file,
      begin: Int? = this.begin,
      end: Int? = this.end,
      unknownFields: ByteString = this.unknownFields,
    ): Annotation = Annotation(path, source_file, begin, end, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Annotation> = object : ProtoAdapter<Annotation>(
        FieldEncoding.LENGTH_DELIMITED, 
        Annotation::class, 
        "type.googleapis.com/google.protobuf.GeneratedCodeInfo.Annotation", 
        PROTO_2, 
        null, 
        "descriptor.proto"
      ) {
        public override fun encodedSize(`value`: Annotation): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(1, value.path)
          size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.source_file)
          size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.begin)
          size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.end)
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: Annotation): Unit {
          ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 1, value.path)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.source_file)
          ProtoAdapter.INT32.encodeWithTag(writer, 3, value.begin)
          ProtoAdapter.INT32.encodeWithTag(writer, 4, value.end)
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: Annotation): Unit {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.INT32.encodeWithTag(writer, 4, value.end)
          ProtoAdapter.INT32.encodeWithTag(writer, 3, value.begin)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.source_file)
          ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 1, value.path)
        }

        public override fun decode(reader: ProtoReader): Annotation {
          val path = mutableListOf<Int>()
          var source_file: String? = null
          var begin: Int? = null
          var end: Int? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> path.add(ProtoAdapter.INT32.decode(reader))
              2 -> source_file = ProtoAdapter.STRING.decode(reader)
              3 -> begin = ProtoAdapter.INT32.decode(reader)
              4 -> end = ProtoAdapter.INT32.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return Annotation(
            path = path,
            source_file = source_file,
            begin = begin,
            end = end,
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: Annotation): Annotation = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
