// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.protobuf.FileDescriptorSet in descriptor.proto
package com.google.protobuf.compiler

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 *  The protocol compiler can output a FileDescriptorSet containing the .proto
 *  files it parses.
 */
public class FileDescriptorSet(
  file_: List<FileDescriptorProto> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<FileDescriptorSet, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.google.protobuf.FileDescriptorProto#ADAPTER",
    label = WireField.Label.REPEATED,
    declaredName = "file",
  )
  public val file_: List<FileDescriptorProto> = immutableCopyOf("file_", file_)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is FileDescriptorSet) return false
    if (unknownFields != other.unknownFields) return false
    if (file_ != other.file_) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + file_.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (file_.isNotEmpty()) result += """file_=$file_"""
    return result.joinToString(prefix = "FileDescriptorSet{", separator = ", ", postfix = "}")
  }

  public fun copy(file_: List<FileDescriptorProto> = this.file_, unknownFields: ByteString =
      this.unknownFields): FileDescriptorSet = FileDescriptorSet(file_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<FileDescriptorSet> = object : ProtoAdapter<FileDescriptorSet>(
      FieldEncoding.LENGTH_DELIMITED, 
      FileDescriptorSet::class, 
      "type.googleapis.com/google.protobuf.FileDescriptorSet", 
      PROTO_2, 
      null, 
      "descriptor.proto"
    ) {
      public override fun encodedSize(`value`: FileDescriptorSet): Int {
        var size = value.unknownFields.size
        size += FileDescriptorProto.ADAPTER.asRepeated().encodedSizeWithTag(1, value.file_)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: FileDescriptorSet): Unit {
        FileDescriptorProto.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.file_)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: FileDescriptorSet): Unit {
        writer.writeBytes(value.unknownFields)
        FileDescriptorProto.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.file_)
      }

      public override fun decode(reader: ProtoReader): FileDescriptorSet {
        val file_ = mutableListOf<FileDescriptorProto>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> file_.add(FileDescriptorProto.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return FileDescriptorSet(
          file_ = file_,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: FileDescriptorSet): FileDescriptorSet = value.copy(
        file_ = value.file_.redactElements(FileDescriptorProto.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
