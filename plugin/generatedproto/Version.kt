// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.protobuf.compiler.Version in plugin.proto
package com.google.protobuf.compiler

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

/**
 *  The version number of protocol compiler.
 */
public class Version(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
  )
  public val major: Int? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
  )
  public val minor: Int? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
  )
  public val patch: Int? = null,
  /**
   *  A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
   *  be empty for mainline stable releases.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val suffix: String? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<Version, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Version) return false
    if (unknownFields != other.unknownFields) return false
    if (major != other.major) return false
    if (minor != other.minor) return false
    if (patch != other.patch) return false
    if (suffix != other.suffix) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (major?.hashCode() ?: 0)
      result = result * 37 + (minor?.hashCode() ?: 0)
      result = result * 37 + (patch?.hashCode() ?: 0)
      result = result * 37 + (suffix?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (major != null) result += """major=$major"""
    if (minor != null) result += """minor=$minor"""
    if (patch != null) result += """patch=$patch"""
    if (suffix != null) result += """suffix=${sanitize(suffix)}"""
    return result.joinToString(prefix = "Version{", separator = ", ", postfix = "}")
  }

  public fun copy(
    major: Int? = this.major,
    minor: Int? = this.minor,
    patch: Int? = this.patch,
    suffix: String? = this.suffix,
    unknownFields: ByteString = this.unknownFields,
  ): Version = Version(major, minor, patch, suffix, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Version> = object : ProtoAdapter<Version>(
      FieldEncoding.LENGTH_DELIMITED, 
      Version::class, 
      "type.googleapis.com/google.protobuf.compiler.Version", 
      PROTO_2, 
      null, 
      "plugin.proto"
    ) {
      public override fun encodedSize(`value`: Version): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.major)
        size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.minor)
        size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.patch)
        size += ProtoAdapter.STRING.encodedSizeWithTag(4, value.suffix)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Version): Unit {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.major)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.minor)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.patch)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.suffix)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Version): Unit {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.suffix)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.patch)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.minor)
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.major)
      }

      public override fun decode(reader: ProtoReader): Version {
        var major: Int? = null
        var minor: Int? = null
        var patch: Int? = null
        var suffix: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> major = ProtoAdapter.INT32.decode(reader)
            2 -> minor = ProtoAdapter.INT32.decode(reader)
            3 -> patch = ProtoAdapter.INT32.decode(reader)
            4 -> suffix = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Version(
          major = major,
          minor = minor,
          patch = patch,
          suffix = suffix,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Version): Version = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
