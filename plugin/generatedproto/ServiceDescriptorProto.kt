// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.protobuf.ServiceDescriptorProto in descriptor.proto
package com.google.protobuf.compiler

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 *  Describes a service.
 */
public class ServiceDescriptorProto(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val name: String? = null,
  method: List<MethodDescriptorProto> = emptyList(),
  @field:WireField(
    tag = 3,
    adapter = "com.google.protobuf.ServiceOptions#ADAPTER",
  )
  public val options: ServiceOptions? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<ServiceDescriptorProto, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    adapter = "com.google.protobuf.MethodDescriptorProto#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val method: List<MethodDescriptorProto> = immutableCopyOf("method", method)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ServiceDescriptorProto) return false
    if (unknownFields != other.unknownFields) return false
    if (name != other.name) return false
    if (method != other.method) return false
    if (options != other.options) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (name?.hashCode() ?: 0)
      result = result * 37 + method.hashCode()
      result = result * 37 + (options?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (name != null) result += """name=${sanitize(name)}"""
    if (method.isNotEmpty()) result += """method=$method"""
    if (options != null) result += """options=$options"""
    return result.joinToString(prefix = "ServiceDescriptorProto{", separator = ", ", postfix = "}")
  }

  public fun copy(
    name: String? = this.name,
    method: List<MethodDescriptorProto> = this.method,
    options: ServiceOptions? = this.options,
    unknownFields: ByteString = this.unknownFields,
  ): ServiceDescriptorProto = ServiceDescriptorProto(name, method, options, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ServiceDescriptorProto> = object :
        ProtoAdapter<ServiceDescriptorProto>(
      FieldEncoding.LENGTH_DELIMITED, 
      ServiceDescriptorProto::class, 
      "type.googleapis.com/google.protobuf.ServiceDescriptorProto", 
      PROTO_2, 
      null, 
      "descriptor.proto"
    ) {
      public override fun encodedSize(`value`: ServiceDescriptorProto): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
        size += MethodDescriptorProto.ADAPTER.asRepeated().encodedSizeWithTag(2, value.method)
        size += ServiceOptions.ADAPTER.encodedSizeWithTag(3, value.options)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ServiceDescriptorProto): Unit {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        MethodDescriptorProto.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.method)
        ServiceOptions.ADAPTER.encodeWithTag(writer, 3, value.options)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ServiceDescriptorProto):
          Unit {
        writer.writeBytes(value.unknownFields)
        ServiceOptions.ADAPTER.encodeWithTag(writer, 3, value.options)
        MethodDescriptorProto.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.method)
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
      }

      public override fun decode(reader: ProtoReader): ServiceDescriptorProto {
        var name: String? = null
        val method = mutableListOf<MethodDescriptorProto>()
        var options: ServiceOptions? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> method.add(MethodDescriptorProto.ADAPTER.decode(reader))
            3 -> options = ServiceOptions.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ServiceDescriptorProto(
          name = name,
          method = method,
          options = options,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ServiceDescriptorProto): ServiceDescriptorProto =
          value.copy(
        method = value.method.redactElements(MethodDescriptorProto.ADAPTER),
        options = value.options?.let(ServiceOptions.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
