// Code generated by Wire protocol buffer compiler, do not edit.
// Source: google.protobuf.compiler.CodeGeneratorResponse in plugin.proto
package com.google.protobuf.compiler

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

/**
 *  The plugin writes an encoded CodeGeneratorResponse to stdout.
 */
public class CodeGeneratorResponse(
  /**
   *  Error message.  If non-empty, code generation failed.  The plugin process
   *  should exit with status code zero even if it reports an error in this way.
   *
   *  This should be used to indicate errors in .proto files which prevent the
   *  code generator from generating correct code.  Errors which indicate a
   *  problem in protoc itself -- such as the input CodeGeneratorRequest being
   *  unparseable -- should be reported by writing a message to stderr and
   *  exiting with a non-zero status code.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val error: String? = null,
  /**
   *  A bitmask of supported features that the code generator supports.
   *  This is a bitwise "or" of values from the Feature enum.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    jsonName = "supportedFeatures",
  )
  public val supported_features: Long? = null,
  file_: List<File> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<CodeGeneratorResponse, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 15,
    adapter = "com.google.protobuf.compiler.CodeGeneratorResponse${'$'}File#ADAPTER",
    label = WireField.Label.REPEATED,
    declaredName = "file",
  )
  public val file_: List<File> = immutableCopyOf("file_", file_)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CodeGeneratorResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (error != other.error) return false
    if (supported_features != other.supported_features) return false
    if (file_ != other.file_) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (error?.hashCode() ?: 0)
      result = result * 37 + (supported_features?.hashCode() ?: 0)
      result = result * 37 + file_.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (error != null) result += """error=${sanitize(error)}"""
    if (supported_features != null) result += """supported_features=$supported_features"""
    if (file_.isNotEmpty()) result += """file_=$file_"""
    return result.joinToString(prefix = "CodeGeneratorResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    error: String? = this.error,
    supported_features: Long? = this.supported_features,
    file_: List<File> = this.file_,
    unknownFields: ByteString = this.unknownFields,
  ): CodeGeneratorResponse = CodeGeneratorResponse(error, supported_features, file_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<CodeGeneratorResponse> = object :
        ProtoAdapter<CodeGeneratorResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      CodeGeneratorResponse::class, 
      "type.googleapis.com/google.protobuf.compiler.CodeGeneratorResponse", 
      PROTO_2, 
      null, 
      "plugin.proto"
    ) {
      public override fun encodedSize(`value`: CodeGeneratorResponse): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.error)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(2, value.supported_features)
        size += File.ADAPTER.asRepeated().encodedSizeWithTag(15, value.file_)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: CodeGeneratorResponse): Unit {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.error)
        ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.supported_features)
        File.ADAPTER.asRepeated().encodeWithTag(writer, 15, value.file_)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: CodeGeneratorResponse): Unit {
        writer.writeBytes(value.unknownFields)
        File.ADAPTER.asRepeated().encodeWithTag(writer, 15, value.file_)
        ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.supported_features)
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.error)
      }

      public override fun decode(reader: ProtoReader): CodeGeneratorResponse {
        var error: String? = null
        var supported_features: Long? = null
        val file_ = mutableListOf<File>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> error = ProtoAdapter.STRING.decode(reader)
            2 -> supported_features = ProtoAdapter.UINT64.decode(reader)
            15 -> file_.add(File.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return CodeGeneratorResponse(
          error = error,
          supported_features = supported_features,
          file_ = file_,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: CodeGeneratorResponse): CodeGeneratorResponse =
          value.copy(
        file_ = value.file_.redactElements(File.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  /**
   *  Represents a single generated file.
   */
  public class File(
    /**
     *  The file name, relative to the output directory.  The name must not
     *  contain "." or ".." components and must be relative, not be absolute (so,
     *  the file cannot lie outside the output directory).  "/" must be used as
     *  the path separator, not "\".
     *
     *  If the name is omitted, the content will be appended to the previous
     *  file.  This allows the generator to break large files into small chunks,
     *  and allows the generated text to be streamed back to protoc so that large
     *  files need not reside completely in memory at one time.  Note that as of
     *  this writing protoc does not optimize for this -- it will read the entire
     *  CodeGeneratorResponse before writing files to disk.
     */
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
    )
    public val name: String? = null,
    /**
     *  If non-empty, indicates that the named file should already exist, and the
     *  content here is to be inserted into that file at a defined insertion
     *  point.  This feature allows a code generator to extend the output
     *  produced by another code generator.  The original generator may provide
     *  insertion points by placing special annotations in the file that look
     *  like:
     *    @@protoc_insertion_point(NAME)
     *  The annotation can have arbitrary text before and after it on the line,
     *  which allows it to be placed in a comment.  NAME should be replaced with
     *  an identifier naming the point -- this is what other generators will use
     *  as the insertion_point.  Code inserted at this point will be placed
     *  immediately above the line containing the insertion point (thus multiple
     *  insertions to the same point will come out in the order they were added).
     *  The double-@ is intended to make it unlikely that the generated code
     *  could contain things that look like insertion points by accident.
     *
     *  For example, the C++ code generator places the following line in the
     *  .pb.h files that it generates:
     *    // @@protoc_insertion_point(namespace_scope)
     *  This line appears within the scope of the file's package namespace, but
     *  outside of any particular class.  Another plugin can then specify the
     *  insertion_point "namespace_scope" to generate additional classes or
     *  other declarations that should be placed in this scope.
     *
     *  Note that if the line containing the insertion point begins with
     *  whitespace, the same whitespace will be added to every line of the
     *  inserted text.  This is useful for languages like Python, where
     *  indentation matters.  In these languages, the insertion point comment
     *  should be indented the same amount as any inserted code will need to be
     *  in order to work correctly in that context.
     *
     *  The code generator that generates the initial file and the one which
     *  inserts into it must both run as part of a single invocation of protoc.
     *  Code generators are executed in the order in which they appear on the
     *  command line.
     *
     *  If |insertion_point| is present, |name| must also be present.
     */
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      jsonName = "insertionPoint",
    )
    public val insertion_point: String? = null,
    /**
     *  The file contents.
     */
    @field:WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
    )
    public val content: String? = null,
    /**
     *  Information describing the file content being inserted. If an insertion
     *  point is used, this information will be appropriately offset and inserted
     *  into the code generation metadata for the generated files.
     */
    @field:WireField(
      tag = 16,
      adapter = "com.google.protobuf.GeneratedCodeInfo#ADAPTER",
      jsonName = "generatedCodeInfo",
    )
    public val generated_code_info: GeneratedCodeInfo? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<File, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    public override fun newBuilder(): Nothing = throw
        AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is File) return false
      if (unknownFields != other.unknownFields) return false
      if (name != other.name) return false
      if (insertion_point != other.insertion_point) return false
      if (content != other.content) return false
      if (generated_code_info != other.generated_code_info) return false
      return true
    }

    public override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + (name?.hashCode() ?: 0)
        result = result * 37 + (insertion_point?.hashCode() ?: 0)
        result = result * 37 + (content?.hashCode() ?: 0)
        result = result * 37 + (generated_code_info?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    public override fun toString(): String {
      val result = mutableListOf<String>()
      if (name != null) result += """name=${sanitize(name)}"""
      if (insertion_point != null) result += """insertion_point=${sanitize(insertion_point)}"""
      if (content != null) result += """content=${sanitize(content)}"""
      if (generated_code_info != null) result += """generated_code_info=$generated_code_info"""
      return result.joinToString(prefix = "File{", separator = ", ", postfix = "}")
    }

    public fun copy(
      name: String? = this.name,
      insertion_point: String? = this.insertion_point,
      content: String? = this.content,
      generated_code_info: GeneratedCodeInfo? = this.generated_code_info,
      unknownFields: ByteString = this.unknownFields,
    ): File = File(name, insertion_point, content, generated_code_info, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<File> = object : ProtoAdapter<File>(
        FieldEncoding.LENGTH_DELIMITED, 
        File::class, 
        "type.googleapis.com/google.protobuf.compiler.CodeGeneratorResponse.File", 
        PROTO_2, 
        null, 
        "plugin.proto"
      ) {
        public override fun encodedSize(`value`: File): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
          size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.insertion_point)
          size += ProtoAdapter.STRING.encodedSizeWithTag(15, value.content)
          size += GeneratedCodeInfo.ADAPTER.encodedSizeWithTag(16, value.generated_code_info)
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: File): Unit {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.insertion_point)
          ProtoAdapter.STRING.encodeWithTag(writer, 15, value.content)
          GeneratedCodeInfo.ADAPTER.encodeWithTag(writer, 16, value.generated_code_info)
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: File): Unit {
          writer.writeBytes(value.unknownFields)
          GeneratedCodeInfo.ADAPTER.encodeWithTag(writer, 16, value.generated_code_info)
          ProtoAdapter.STRING.encodeWithTag(writer, 15, value.content)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.insertion_point)
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        }

        public override fun decode(reader: ProtoReader): File {
          var name: String? = null
          var insertion_point: String? = null
          var content: String? = null
          var generated_code_info: GeneratedCodeInfo? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> name = ProtoAdapter.STRING.decode(reader)
              2 -> insertion_point = ProtoAdapter.STRING.decode(reader)
              15 -> content = ProtoAdapter.STRING.decode(reader)
              16 -> generated_code_info = GeneratedCodeInfo.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return File(
            name = name,
            insertion_point = insertion_point,
            content = content,
            generated_code_info = generated_code_info,
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: File): File = value.copy(
          generated_code_info = value.generated_code_info?.let(GeneratedCodeInfo.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  /**
   *  Sync with code_generator.h.
   */
  public enum class Feature(
    public override val `value`: Int,
  ) : WireEnum {
    FEATURE_NONE(0),
    FEATURE_PROTO3_OPTIONAL(1),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Feature> = object : EnumAdapter<Feature>(
        Feature::class, 
        PROTO_2, 
        Feature.FEATURE_NONE
      ) {
        public override fun fromValue(`value`: Int): Feature? = Feature.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): Feature? = when (value) {
        0 -> FEATURE_NONE
        1 -> FEATURE_PROTO3_OPTIONAL
        else -> null
      }
    }
  }
}
