// Code generated by Wire protocol buffer compiler, do not edit.
// Source: proto3.simple.EnumMsg in simple.proto
package proto3.simple

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class EnumMsg(
  @field:WireField(
    tag = 1,
    adapter = "proto3.simple.Enum#ADAPTER",
  )
  public val enumeration: Enum? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<EnumMsg, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is EnumMsg) return false
    if (unknownFields != other.unknownFields) return false
    if (enumeration != other.enumeration) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (enumeration?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (enumeration != null) result += """enumeration=$enumeration"""
    return result.joinToString(prefix = "EnumMsg{", separator = ", ", postfix = "}")
  }

  public fun copy(enumeration: Enum? = this.enumeration, unknownFields: ByteString =
      this.unknownFields): EnumMsg = EnumMsg(enumeration, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<EnumMsg> = object : ProtoAdapter<EnumMsg>(
      FieldEncoding.LENGTH_DELIMITED, 
      EnumMsg::class, 
      "type.googleapis.com/proto3.simple.EnumMsg", 
      PROTO_3, 
      null, 
      "simple.proto"
    ) {
      public override fun encodedSize(`value`: EnumMsg): Int {
        var size = value.unknownFields.size
        size += Enum.ADAPTER.encodedSizeWithTag(1, value.enumeration)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: EnumMsg): Unit {
        Enum.ADAPTER.encodeWithTag(writer, 1, value.enumeration)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: EnumMsg): Unit {
        writer.writeBytes(value.unknownFields)
        Enum.ADAPTER.encodeWithTag(writer, 1, value.enumeration)
      }

      public override fun decode(reader: ProtoReader): EnumMsg {
        var enumeration: Enum? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              enumeration = Enum.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return EnumMsg(
          enumeration = enumeration,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: EnumMsg): EnumMsg = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
