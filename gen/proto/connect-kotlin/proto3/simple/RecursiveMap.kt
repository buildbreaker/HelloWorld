// Code generated by Wire protocol buffer compiler, do not edit.
// Source: proto3.simple.RecursiveMap in simple.proto
package proto3.simple

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

/**
 *  Maps
 */
public class RecursiveMap(
  map: Map<String, RecursiveMap> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<RecursiveMap, Nothing>(ADAPTER, unknownFields) {
  /**
   *  Recursive reference for map
   */
  @field:WireField(
    tag = 1,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "proto3.simple.RecursiveMap#ADAPTER",
  )
  public val map: Map<String, RecursiveMap> = immutableCopyOf("map", map)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is RecursiveMap) return false
    if (unknownFields != other.unknownFields) return false
    if (map != other.map) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + map.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (map.isNotEmpty()) result += """map=$map"""
    return result.joinToString(prefix = "RecursiveMap{", separator = ", ", postfix = "}")
  }

  public fun copy(map: Map<String, RecursiveMap> = this.map, unknownFields: ByteString =
      this.unknownFields): RecursiveMap = RecursiveMap(map, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<RecursiveMap> = object : ProtoAdapter<RecursiveMap>(
      FieldEncoding.LENGTH_DELIMITED, 
      RecursiveMap::class, 
      "type.googleapis.com/proto3.simple.RecursiveMap", 
      PROTO_3, 
      null, 
      "simple.proto"
    ) {
      private val mapAdapter: ProtoAdapter<Map<String, RecursiveMap>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, RecursiveMap.ADAPTER) }

      public override fun encodedSize(`value`: RecursiveMap): Int {
        var size = value.unknownFields.size
        size += mapAdapter.encodedSizeWithTag(1, value.map)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: RecursiveMap): Unit {
        mapAdapter.encodeWithTag(writer, 1, value.map)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: RecursiveMap): Unit {
        writer.writeBytes(value.unknownFields)
        mapAdapter.encodeWithTag(writer, 1, value.map)
      }

      public override fun decode(reader: ProtoReader): RecursiveMap {
        val map = mutableMapOf<String, RecursiveMap>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> map.putAll(mapAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return RecursiveMap(
          map = map,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: RecursiveMap): RecursiveMap = value.copy(
        map = value.map.redactElements(RecursiveMap.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
