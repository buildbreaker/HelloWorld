// Code generated by Wire protocol buffer compiler, do not edit.
// Source: proto3.simple.NestedMsg in simple.proto
import Foundation
import Wire

/**
 *  NestedMsg
 */
public struct NestedMsg {

    /**
     *  InnerMsg field
     */
    public var msg: InnerMsg?
    public var unknownFields: Data = .init()

    public init(msg: InnerMsg? = nil) {
        self.msg = msg
    }

    /**
     *  This message is nested inside another
     */
    public struct InnerMsg {

        /**
         *  InnerMsg field
         */
        public var i: Int32?
        public var unknownFields: Data = .init()

        public init(i: Int32? = nil) {
            self.i = i
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension NestedMsg.InnerMsg : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension NestedMsg.InnerMsg : Hashable {
}
#endif

extension NestedMsg.InnerMsg : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var i: Int32? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: i = try reader.decode(Int32.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.i = i
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.i)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension NestedMsg.InnerMsg : Codable {
    public enum CodingKeys : String, CodingKey {

        case i

    }
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension NestedMsg : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension NestedMsg : Hashable {
}
#endif

extension NestedMsg : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var msg: NestedMsg.InnerMsg? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: msg = try reader.decode(NestedMsg.InnerMsg.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.msg = msg
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.msg)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension NestedMsg : Codable {
    public enum CodingKeys : String, CodingKey {

        case msg

    }
}
#endif
