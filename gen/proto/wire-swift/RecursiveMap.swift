// Code generated by Wire protocol buffer compiler, do not edit.
// Source: proto3.simple.RecursiveMap in simple.proto
import Foundation
import Wire

/**
 *  Maps
 */
public struct RecursiveMap {

    /**
     *  Recursive reference for map
     */
    public var map: [String : RecursiveMap]
    public var unknownFields: Data = .init()

    public init(map: [String : RecursiveMap] = [:]) {
        self.map = map
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension RecursiveMap : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension RecursiveMap : Hashable {
}
#endif

extension RecursiveMap : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var map: [String : RecursiveMap] = [:]

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &map)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.map = map
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.map)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension RecursiveMap : Codable {
    public enum CodingKeys : String, CodingKey {

        case map

    }
}
#endif
