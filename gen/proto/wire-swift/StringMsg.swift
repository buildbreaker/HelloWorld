// Code generated by Wire protocol buffer compiler, do not edit.
// Source: proto3.simple.StringMsg in simple.proto
import Foundation
import Wire

/**
 *  A very simple message with one string
 */
public struct StringMsg {

    /**
     *  leading doc comment
     */
    public var str: String?
    public var unknownFields: Data = .init()

    public init(str: String? = nil) {
        self.str = str
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension StringMsg : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension StringMsg : Hashable {
}
#endif

extension StringMsg : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var str: String? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: str = try reader.decode(String.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.str = str
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.str)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension StringMsg : Codable {
    public enum CodingKeys : String, CodingKey {

        case str

    }
}
#endif
