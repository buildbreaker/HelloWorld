// Code generated by Wire protocol buffer compiler, do not edit.
// Source: proto3.simple.OneOfMsg in simple.proto
import Foundation
import Wire

/**
 *  OneOfMsg
 */
public struct OneOfMsg {

    /**
     *  present
     */
    public var always_present: String?
    /**
     *  OneOfMsg
     */
    public var some_oneof: Some_oneof?
    public var unknownFields: Data = .init()

    public init(always_present: String? = nil, some_oneof: Some_oneof? = nil) {
        self.always_present = always_present
        self.some_oneof = some_oneof
    }

    public enum Some_oneof {

        /**
         *  oneof str_a
         */
        case str_a(String)
        /**
         *  oneof str_b
         */
        case str_b(String)

        fileprivate func encode(to writer: ProtoWriter) throws {
            switch self {
            case .str_a(let str_a): try writer.encode(tag: 1, value: str_a)
            case .str_b(let str_b): try writer.encode(tag: 2, value: str_b)
            }
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension OneOfMsg.Some_oneof : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension OneOfMsg.Some_oneof : Hashable {
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension OneOfMsg : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension OneOfMsg : Hashable {
}
#endif

extension OneOfMsg : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var always_present: String? = nil
        var some_oneof: OneOfMsg.Some_oneof? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 3: always_present = try reader.decode(String.self)
            case 1: some_oneof = .str_a(try reader.decode(String.self))
            case 2: some_oneof = .str_b(try reader.decode(String.self))
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.always_present = always_present
        self.some_oneof = some_oneof
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 3, value: self.always_present)
        if let some_oneof = self.some_oneof {
            try some_oneof.encode(to: writer)
        }
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension OneOfMsg : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: OneOfMsg.CodingKeys.self)
        self.always_present = try container.decode(String?.self, forKey: .always_present)
        if container.contains(.str_a) {
            let str_a = try container.decode(String.self, forKey: .str_a)
            self.some_oneof = .str_a(str_a)
        } else if container.contains(.str_b) {
            let str_b = try container.decode(String.self, forKey: .str_b)
            self.some_oneof = .str_b(str_b)
        } else {
            self.some_oneof = nil
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: OneOfMsg.CodingKeys.self)
        try container.encode(self.always_present, forKey: .always_present)
        switch self.some_oneof {
        case .str_a(let str_a): try container.encode(str_a, forKey: .str_a)
        case .str_b(let str_b): try container.encode(str_b, forKey: .str_b)
        case Optional.none: break
        }
    }

    public enum CodingKeys : String, CodingKey {

        case always_present
        case str_a
        case str_b

    }
}
#endif
